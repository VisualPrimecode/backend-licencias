const Envio = require('../models/envio.model');
const envioQueue = require('../queues/envioQueue'); // Ruta a tu cola
const cotizacionQueue = require('../queues/cotizacionQueue');
const { getSMTPConfigByStoreId } = require('../models/correosConfig.model');


// Obtener todos los env√≠os
exports.getEnvios = async (req, res) => {
  console.log('üì¶ Obteniendo todos los env√≠os...');
  try {
    const envios = await Envio.getAllEnvios();
    res.json(envios);
  } catch (error) {
    console.error('‚ùå Error al obtener env√≠os:', error);
    res.status(500).json({ error: 'Error al obtener env√≠os' });
  }
};

// Obtener un env√≠o por ID
exports.getEnvioById = async (req, res) => {
  console.log('üîç Obteniendo env√≠o por ID...');
  try {
    const { id } = req.params;
    const envio = await Envio.getEnvioById(id);

    if (!envio) {
      return res.status(404).json({ error: 'Env√≠o no encontrado' });
    }

    res.json(envio);
  } catch (error) {
    console.error('‚ùå Error al obtener env√≠o:', error);
    res.status(500).json({ error: 'Error al obtener env√≠o' });
  }
};

exports.createEnvio = async (req, res) => {
  console.log('üì¶ Creando un nuevo env√≠o...');
  console.log('Datos del env√≠o:', req.body);

  try {
    const envioData = {
      ...req.body,
      estado: 'pendiente'
    };

    if (!envioData.empresa_id || !envioData.usuario_id || !envioData.producto_id) {
      return res.status(400).json({
        error: 'Faltan campos obligatorios (empresa_id, usuario_id, producto_id)'
      });
    }

    const id = await Envio.createEnvio(envioData);

    // üì¨ Obtener SMTP desde la BD
    const config = await getSMTPConfigByStoreId(envioData.store_id || 3);
    if (!config) {
      return res.status(500).json({ error: 'No se encontr√≥ configuraci√≥n SMTP activa' });
    }

    const smtpConfig = {
      host: config.smtp_host,
      port: config.smtp_port,
      secure: !!config.smtp_secure,
      user: config.smtp_username,
      pass: config.smtp_password
    };

    await envioQueue.add({
      id,
      ...envioData,
      smtpConfig
    });

    return res.status(201).json({ id });
  } catch (error) {
    console.error('‚ùå Error al crear env√≠o:', error);
    return res.status(500).json({ error: 'Error al crear env√≠o' });
  }
};

exports.createCotizacion = async (req, res) => {
  console.log('üìù Creando nueva cotizaci√≥n...');

  try {
    // Extraer datos de la cotizaci√≥n
    const cotizacionData = {
      ...req.body,
      nombre_cliente: req.body.nombre_cliente || 'Cliente',
      numero_cotizacion: req.body.numero_cotizacion || 'N/A',
      store_id: req.body.store_id || 3  // Aseg√∫rate de incluir el store_id real
    };
    console.log('Datos de la cotizaci√≥n procesados:', cotizacionData);
    // ‚úÖ Validaci√≥n m√≠nima
    if (
      !cotizacionData.email_destino ||
      !cotizacionData.nombre_cliente ||
      !cotizacionData.numero_cotizacion ||
      !cotizacionData.store_id
    ) {
      return res.status(400).json({
        error: 'Faltan campos obligatorios (email_destino, nombre_cliente, numero_cotizacion, store_id)'
      });
    }
    console.log('1');
    // ‚úÖ Obtener configuraci√≥n SMTP desde la BD
    const config = await getSMTPConfigByStoreId(cotizacionData.store_id); // 'envios' o 'cotizaciones' seg√∫n lo que uses
    if (!config) {
      return res.status(404).json({ error: 'No se encontr√≥ configuraci√≥n SMTP activa para la tienda' });
    }
    console.log('2');
    const smtpConfig = {
      host: config.smtp_host,
      port: config.smtp_port,
      secure: !!config.smtp_secure,
      user: config.smtp_username,
      pass: config.smtp_password
    };
    console.log('Configuraci√≥n SMTP obtenida:', smtpConfig);

    // ‚úÖ Encolar el trabajo para el worker
    await cotizacionQueue.add({
      ...cotizacionData,
      smtpConfig
    });

    console.log('‚úÖ Job de cotizaci√≥n encolado');
    return res.status(201).json({ message: 'Cotizaci√≥n encolada para env√≠o' });

  } catch (error) {
    console.error('‚ùå Error al crear cotizaci√≥n:', error);
    return res.status(500).json({ error: 'Error al crear cotizaci√≥n' });
  }
};


// Actualizar un env√≠o existente
exports.updateEnvio = async (req, res) => {
  console.log('üîÑ Actualizando env√≠o...');
  try {
    const { id } = req.params;
    const envioExistente = await Envio.getEnvioById(id);

    if (!envioExistente) {
      return res.status(404).json({ error: 'Env√≠o no encontrado' });
    }

    await Envio.updateEnvio(id, req.body);
    res.json({ mensaje: 'Env√≠o actualizado correctamente' });
  } catch (error) {
    console.error('‚ùå Error al actualizar env√≠o:', error);
    res.status(500).json({ error: 'Error al actualizar env√≠o' });
  }
};

// Eliminar un env√≠o
exports.deleteEnvio = async (req, res) => {
  console.log('üóëÔ∏è Eliminando env√≠o...');
  try {
    const { id } = req.params;
    const envio = await Envio.getEnvioById(id);

    if (!envio) {
      return res.status(404).json({ error: 'Env√≠o no encontrado' });
    }

    await Envio.deleteEnvio(id);
    res.json({ mensaje: 'Env√≠o eliminado correctamente' });
  } catch (error) {
    console.error('‚ùå Error al eliminar env√≠o:', error);
    res.status(500).json({ error: 'Error al eliminar env√≠o' });
  }
};
// Consultar estado del env√≠o por woo_id y numero_pedido
exports.consultarEstadoEnvio = async (req, res) => {
  try {
    const { woo_id, numero_pedido } = req.query;
   // console.log('Par√°metros recibidos:', { woo_id, numero_pedido });

    // Validaci√≥n b√°sica
    if (!woo_id || !numero_pedido) {
      return res.status(400).json({ error: 'Par√°metros requeridos: woo_id y numero_pedido' });
    }

    const estado = await Envio.getEstadoEnvio(woo_id, numero_pedido);

    console.log('Estado del env√≠o:', estado);
    if (!estado) {
      return res.status(404).json({ error: 'Env√≠o no encontrado' });
    }

    res.json({ estado });
  } catch (error) {
    console.error('‚ùå Error en consultarEstadoEnvio:', error.message);
    res.status(500).json({ error: 'Error al consultar estado del env√≠o' });
  }
};

// Verificar si existe un env√≠o por n√∫mero de pedido y WooCommerce ID
exports.verificarEnvioPorPedidoWoo = async (req, res) => {
  try {
    const { numero_pedido, woo_id } = req.query;

    // Validaci√≥n b√°sica
    if (!numero_pedido || !woo_id) {
      return res.status(400).json({ error: 'Faltan par√°metros requeridos: numero_pedido y woo_id' });
    }

    const existe = await Envio.existeEnvioPorPedidoWoo(numero_pedido, woo_id);
    res.json({ existe });
  } catch (error) {
    console.error('‚ùå Error al verificar env√≠o:', error);
    res.status(500).json({ error: 'Error al verificar env√≠o' });
  }
};
