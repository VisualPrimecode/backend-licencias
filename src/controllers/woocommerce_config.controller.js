const WooConfig = require('../models/woocommerce_config.model');
exports.getAllConfigs = async (req, res) => {
  console.log('üîç Obteniendo todas las configuraciones WooCommerce...');
  try {
    const configs = await WooConfig.getAllConfigs();
    res.json(configs);
  } catch (error) {
    console.error('Error al obtener configuraciones WooCommerce:', error);
    res.status(500).json({ error: 'Error al obtener configuraciones' });
  }
};

exports.syncProducts = async (req, res) => {
  const { storeId } = req.params;

  console.log(`üîÑ Sincronizando productos de la tienda: ${storeId}...`);

  try {
    if (!storeId) {
      return res.status(400).json({ error: "Falta el par√°metro storeId" });
    }

    const result = await WooConfig.syncProductsFromStore(storeId);

    res.json({
      success: true,
      message: result.message || "Productos sincronizados correctamente"
    });
  } catch (error) {
    console.error("‚ùå Error al sincronizar productos:", error.response?.data || error);
    res.status(500).json({
      success: false,
      error: "Error al sincronizar productos",
      details: error.message
    });
  }
};

//obtener todos los prodcutos de  un WooCommerce
exports.getAllConfigsWooProducts = async (req, res) => {
  console.log('üîç Obteniendo productos WooCommerce...');
  console.log('Params:', req.params); // A√±adido para depuraci√≥n
  try {
    const { id } = req.params;
    const queryParams = req.query; // <-- per_page, page, _fields, etc.

    const products = await WooConfig.getProducts(id, queryParams);

    if (!products) {
      return res.status(404).json({ error: 'Configuraci√≥n no encontrada' });
    }

    res.json(products);
  } catch (error) {
    console.error('Error al obtener productos WooCommerce:', error);
    res.status(500).json({ error: 'Error al obtener productos WooCommerce' });
  }
};

//obtener todos los pedidos de un WooCommerce
exports.getAllConfigsWooOrders = async (req, res) => {
  console.log('üîç Obteniendo pedidos WooCommerce...');
  try {
    const { id } = req.params;
    const queryParams = req.query; // ‚úÖ A√±adido: recoger los query params

    const orders = await WooConfig.getPedidos(id, queryParams); // ‚úÖ Pasarlos
    //console.log('Orders:', orders); // ‚úÖ A√±adido: para depuraci√≥n

    if (!orders) {
      return res.status(404).json({ error: 'Configuraci√≥n no encontrada' });
    }

    res.json(orders);
  } catch (error) {
    console.error('Error al obtener pedidos WooCommerce:', error);
    res.status(500).json({ error: 'Error al obtener pedidos WooCommerce' });
  }
};
exports.searchWooOrders = async (req, res) => {
  console.log('üîç Buscando pedidos WooCommerce con filtros...');
  try {
    const { id } = req.params;
    const { name, email, startDate, endDate } = req.query; // ‚úÖ Recoger filtros desde query params

    const orders = await WooConfig.searchPedidos(id, { name, email, startDate, endDate });

    if (!orders || orders.length === 0) {
      return res.status(404).json({ message: 'No se encontraron pedidos con esos filtros' });
    }

    res.json(orders);
  } catch (error) {
    console.error('Error al buscar pedidos WooCommerce (lento):', error);
    res.status(500).json({ error: 'Error al buscar pedidos WooCommerce' });
  }
};

exports.getWooOrderById = async (req, res) => {
  console.log('üîç Buscando pedido WooCommerce por ID...');
  try {
    const { id, orderId } = req.params; // ‚úÖ Correcci√≥n aqu√≠

    if (!orderId) {
      return res.status(400).json({ message: 'Falta el par√°metro "orderId"' });
    }

    const order = await WooConfig.getPedidoById(id, orderId);

    if (!order) {
      return res.status(404).json({ message: 'Pedido no encontrado' });
    }

    res.json(order);
  } catch (error) {
    console.error('‚ùå Error al obtener pedido por ID:', error);
    res.status(500).json({ error: 'Error al obtener pedido por ID' });
  }
};


exports.getConfigById = async (req, res) => {
  try {
    const config = await WooConfig.getConfigById(req.params.id);

    if (!config) {
      return res.status(404).json({ error: 'Configuraci√≥n no encontrada' });
    }

    res.json(config);
  } catch (error) {
    console.error('Error al obtener configuraci√≥n:', error);
    res.status(500).json({ error: 'Error al obtener configuraci√≥n' });
  }
};
exports.getConfigsByEmpresa = async (req, res) => {
  try {
    const configs = await WooConfig.getConfigsByEmpresaId(req.params.empresaId);
    res.json(configs);
  } catch (error) {
    console.error('Error al obtener configuraci√≥n por empresa:', error);
    res.status(500).json({ error: 'Error al obtener configuraci√≥n por empresa' });
  }
};
exports.createConfig = async (req, res) => {
  try {
    const id = await WooConfig.createConfig(req.body);
    res.status(201).json({ id });
  } catch (error) {
    console.error('Error al crear configuraci√≥n:', error);
    res.status(500).json({ error: 'Error al crear configuraci√≥n' });
  }
};
exports.updateConfig = async (req, res) => {
  try {
    const { id } = req.params;
    await WooConfig.updateConfig(id, req.body);
    res.json({ message: 'Configuraci√≥n actualizada correctamente' });
  } catch (error) {
    console.error('Error al actualizar configuraci√≥n:', error);
    res.status(500).json({ error: 'Error al actualizar configuraci√≥n' });
  }
};
exports.deleteConfig = async (req, res) => {
  try {
    const { id } = req.params;
    await WooConfig.deleteConfig(id);
    res.json({ message: 'Configuraci√≥n eliminada correctamente' });
  } catch (error) {
    console.error('Error al eliminar configuraci√≥n:', error);
    res.status(500).json({ error: 'Error al eliminar configuraci√≥n' });
  }
};
exports.getVentasPorPais = async (req, res) => {
  console.log('üìä Generando informe de ventas por pa√≠s/divisa...');
  try {
    const { id } = req.params; // ID de la configuraci√≥n de WooCommerce
    const { startDate, endDate } = req.query; // rango de fechas desde query params

    const informe = await WooConfig.getVentasPorPais(id, { startDate, endDate });

    if (!informe || informe.total_orders === 0) {
      return res.status(404).json({ message: 'No se encontraron ventas en el periodo indicado' });
    }

    res.json(informe);
  } catch (error) {
    console.error('üí• Error al generar informe de ventas por pa√≠s/divisa:', error);
    res.status(500).json({ error: 'Error al generar informe de ventas por pa√≠s/divisa' });
  }
};

exports.getVentasTotalesMXN = async (req, res) => {
  console.log('üìä Generando informe de ventas en MXN...');
  try {
    const { id } = req.params; // üÜî ID de la config de WooCommerce
    const { startDate, endDate } = req.query; // üìÖ rango de fechas desde query params

    const informe = await WooConfig.getVentasTotalesMXN(id, { startDate, endDate });

    if (!informe || informe.total_orders === 0) {
      return res.status(404).json({ message: 'No se encontraron ventas en MXN para el periodo indicado' });
    }

    res.json(informe);
  } catch (error) {
    console.error('Error al generar informe de ventas en MXN:', error);
    res.status(500).json({ error: 'Error al generar informe de ventas en MXN' });
  }
};
// üìà Informe de tendencia de ventas en MXN
exports.getTendenciaProductosMXN = async (req, res) => {
  console.log('üìä Generando informe de TENDENCIA de productos en MXN...');
  try {
    const { id } = req.params; // üÜî ID de la config de WooCommerce
    const { startDate, endDate } = req.query; // üìÖ rango de fechas desde query params

    const informe = await WooConfig.getTendenciaProductosMXN(id, { startDate, endDate });

    if (!informe || informe.productos.length === 0) {
      return res.status(404).json({ message: 'No se encontraron ventas en MXN para el periodo indicado' });
    }

    res.json(informe);
  } catch (error) {
    console.error('Error al generar informe de tendencia de productos en MXN:', error);
    res.status(500).json({ error: 'Error al generar informe de tendencia de productos en MXN' });
  }
};
exports.getVentasPorPaisGlobal = async (req, res) => {
  console.log("üåé Generando informe GLOBAL de ventas por pa√≠s...");
  try {
    const { startDate, endDate } = req.query;

    const informe = await WooConfig.getVentasPorPaisGlobal({ startDate, endDate });

    if (!informe) {
      return res.status(404).json({ message: "No se encontraron ventas para el periodo indicado" });
    }

    res.json(informe);
  } catch (error) {
    console.error("üí• Error al generar informe GLOBAL de ventas por pa√≠s:", error);
    res.status(500).json({ error: "Error al generar informe GLOBAL de ventas por pa√≠s" });
  }
};
// üöÄ Informe GLOBAL: Promedio de ventas por producto
exports.getPromedioProductosGlobal = async (req, res) => {
  console.log("üåé Generando informe GLOBAL de promedio de ventas por producto...");

  try {
    const { startDate, endDate } = req.query;

    const informe = await WooConfig.getPromedioProductosGlobal({ startDate, endDate });

    if (!informe || informe.total_products === 0) {
      return res.status(404).json({ message: "No se encontraron ventas en el rango indicado." });
    }

    res.json(informe);
  } catch (error) {
    console.error("üí• Error al generar informe GLOBAL de promedio de ventas por producto:", error);
    res.status(500).json({ error: "Error al generar informe GLOBAL de promedio de ventas por producto" });
  }
};

// Obtener pedidos de WooCommerce que a√∫n no han sido enviados
exports.getWooOrdersNotSent = async (req, res) => {
  console.log('üöö Verificando pedidos no enviados...');
  
  try {
    const { id } = req.params; // woo_id (configuraci√≥n Woo)
    const queryParams = req.query; // Ej: { per_page: 100, page: 3 }

    // 1Ô∏è‚É£ Obtener pedidos desde WooCommerce
    const pedidosWoo = await WooConfig.getPedidos(id, queryParams);

    if (!pedidosWoo || pedidosWoo.length === 0) {
      return res.status(200).json({ message: 'No se encontraron pedidos en WooCommerce', pedidos: [] });
    }

    // 2Ô∏è‚É£ Filtrar los pedidos que a√∫n no se han registrado en la tabla 'envios'
    const pedidosNoEnviados = await WooConfig.getPedidosNoEnviadosPorTienda(id, pedidosWoo);

    console.log(`üì¶ WooID ${id}: ${pedidosNoEnviados.length} pedidos nuevos sin enviar`);

    // 3Ô∏è‚É£ Responder al cliente con los pedidos no enviados
    res.status(200).json({
      woo_id: id,
      total_woo: pedidosWoo.length,
      nuevos_pedidos: pedidosNoEnviados.length,
      pedidos: pedidosNoEnviados,
    });

  } catch (error) {
    console.error('‚ùå Error al verificar pedidos no enviados:', error);
    res.status(500).json({ error: 'Error al verificar pedidos no enviados', details: error.message });
  }
};

